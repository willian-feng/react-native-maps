
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include "Props.h"
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook {
namespace react {

    AIRMapProps::AIRMapProps(const PropsParserContext &context, const AIRMapProps &sourceProps,
                             const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),

          provider(convertRawProp(context, rawProps, "provider", sourceProps.provider, {})),
          region(convertRawProp(context, rawProps, "region", sourceProps.region, {})),
          initialRegion(convertRawProp(context, rawProps, "initialRegion", sourceProps.initialRegion, {})),
          camera(convertRawProp(context, rawProps, "camera", sourceProps.camera, {})),
          initialCamera(convertRawProp(context, rawProps, "initialCamera", sourceProps.initialCamera, {})),
          mapPadding(convertRawProp(context, rawProps, "mapPadding", sourceProps.mapPadding, {})),
          paddingAdjustmentBehavior(convertRawProp(context, rawProps, "paddingAdjustmentBehavior", sourceProps.paddingAdjustmentBehavior, {static_cast<int>(PaddingAdjustmentBehavior::never)})),
          liteMode(convertRawProp(context, rawProps, "liteMode", sourceProps.liteMode, {false})),
          googleMapId(convertRawProp(context, rawProps, "googleMapId", sourceProps.googleMapId, {})),
          customMapStyleString(convertRawProp(context, rawProps, "customMapStyleString", sourceProps.customMapStyleString, {})),
          mapType(convertRawProp(context, rawProps, "mapType", sourceProps.mapType, {"standard"})),
          customMapStyle(convertRawProp(context, rawProps, "customMapStyle", sourceProps.customMapStyle, {})),
          userInterfaceStyle(convertRawProp(context, rawProps, "userInterfaceStyle", sourceProps.userInterfaceStyle, {})),
          showsUserLocation(convertRawProp(context, rawProps, "showsUserLocation", sourceProps.showsUserLocation, {false})),
          userLocationPriority(convertRawProp(context, rawProps, "userLocationPriority",sourceProps.userLocationPriority, {static_cast<int>(UserLocationPriority::high)})),
          userLocationUpdateInterval(convertRawProp(context, rawProps, "userLocationUpdateInterval", sourceProps.userLocationUpdateInterval, {5000})),
          userLocationFastestInterval(convertRawProp(context, rawProps, "userLocationFastestInterval", sourceProps.userLocationFastestInterval, {5000})),
          userLocationAnnotationTitle(convertRawProp(context, rawProps, "userLocationAnnotationTitle", sourceProps.userLocationAnnotationTitle, {})),
          followsUserLocation(convertRawProp(context, rawProps, "followsUserLocation", sourceProps.followsUserLocation, {false})),
          userLocationCalloutEnabled(convertRawProp(context, rawProps, "userLocationCalloutEnabled", sourceProps.userLocationCalloutEnabled, {false})),
          showsMyLocationButton(convertRawProp(context, rawProps, "showsMyLocationButton", sourceProps.showsMyLocationButton, {true})),
          showsPointsOfInterest(convertRawProp(context, rawProps, "showsPointsOfInterest", sourceProps.showsPointsOfInterest, {true})),
          showsCompass(convertRawProp(context, rawProps, "showsCompass", sourceProps.showsCompass, {true})),
          showsScale(convertRawProp(context, rawProps, "showsScale", sourceProps.showsScale, {true})),
          showsBuildings(convertRawProp(context, rawProps, "showsBuildings", sourceProps.showsBuildings, {true})),
          showsTraffic(convertRawProp(context, rawProps, "showsTraffic", sourceProps.showsTraffic, {false})),
          showsIndoors(convertRawProp(context, rawProps, "showsIndoors", sourceProps.showsIndoors, {true})),
          showsIndoorLevelPicker(convertRawProp(context, rawProps, "showsIndoorLevelPicker", sourceProps.showsIndoorLevelPicker, {false})),
          zoomEnabled(convertRawProp(context, rawProps, "zoomEnabled", sourceProps.zoomEnabled, {true})),
          zoomTapEnabled(convertRawProp(context, rawProps, "zoomTapEnabled", sourceProps.zoomTapEnabled, {true})),
          zoomControlEnabled(convertRawProp(context, rawProps, "zoomControlEnabled", sourceProps.zoomControlEnabled, {true})),
          minZoomLevel(convertRawProp(context, rawProps, "minZoomLevel", sourceProps.minZoomLevel, {0})),
          maxZoomLevel(convertRawProp(context, rawProps, "maxZoomLevel", sourceProps.maxZoomLevel, {20})),
          rotateEnabled(convertRawProp(context, rawProps, "rotateEnabled", sourceProps.rotateEnabled, {false})),
          scrollEnabled(convertRawProp(context, rawProps, "scrollEnabled", sourceProps.scrollEnabled, {true})),
          scrollDuringRotateOrZoomEnabled(convertRawProp(context, rawProps, "scrollDuringRotateOrZoomEnabled", sourceProps.scrollDuringRotateOrZoomEnabled, {true})),
          pitchEnabled(convertRawProp(context, rawProps, "pitchEnabled", sourceProps.pitchEnabled, {true})),
          toolbarEnabled(convertRawProp(context, rawProps, "toolbarEnabled", sourceProps.toolbarEnabled, {true})),
          cacheEnabled(convertRawProp(context, rawProps, "cacheEnabled", sourceProps.cacheEnabled, {false})),
          loadingEnabled(convertRawProp(context, rawProps, "loadingEnabled", sourceProps.loadingEnabled, {false})),
          loadingIndicatorColor(convertRawProp(context, rawProps, "loadingIndicatorColor", sourceProps.loadingIndicatorColor, {SharedColor(0xFF606060)})),
          loadingBackgroundColor(convertRawProp(context, rawProps, "loadingBackgroundColor", sourceProps.loadingBackgroundColor, {SharedColor(0xFFFFFFFF)})),
          tintColor(convertRawProp(context, rawProps, "tintColor", sourceProps.tintColor, {})),
          moveOnMarkerPress(convertRawProp(context, rawProps, "moveOnMarkerPress", sourceProps.moveOnMarkerPress, {true})),
          legalLabelInsets(convertRawProp(context, rawProps, "legalLabelInsets", sourceProps.legalLabelInsets, {})),
          kmlSrc(convertRawProp(context, rawProps, "kmlSrc", sourceProps.kmlSrc, {})),
          compassOffset(convertRawProp(context, rawProps, "compassOffset", sourceProps.compassOffset, {})),
          isAccessibilityElement(convertRawProp(context, rawProps, "isAccessibilityElement", sourceProps.isAccessibilityElement, {false})) {}


    AIRMapMarkerProps::AIRMapMarkerProps(const PropsParserContext &context, const AIRMapMarkerProps &sourceProps,
                                         const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
          description(convertRawProp(context, rawProps, "description", sourceProps.description, {})),
          coordinate(convertRawProp(context, rawProps, "coordinate", sourceProps.coordinate, {})),
          rotation(convertRawProp(context, rawProps, "rotation", sourceProps.rotation, {0})),
          draggable(convertRawProp(context, rawProps, "draggable", sourceProps.draggable, {})),
          flat(convertRawProp(context, rawProps, "flat", sourceProps.flat, {})),
          image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
          calloutAnchor(convertRawProp(context, rawProps, "calloutAnchor", sourceProps.calloutAnchor, {})),
          anchor(convertRawProp(context, rawProps, "anchor", sourceProps.anchor, {})),
          tappable(convertRawProp(context, rawProps, "tappable", sourceProps.tappable, {true})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {0})),
          opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {})) {}

    AIRMapPolylineProps::AIRMapPolylineProps(const PropsParserContext &context, const AIRMapPolylineProps &sourceProps,
                                             const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          coordinates(convertRawProp(context, rawProps, "coordinates", sourceProps.coordinates, {})),
          strokeColor(convertRawProp(context, rawProps, "strokeColor", sourceProps.strokeColor, {SharedColor(0xFF000000)})),
          strokeColors(convertRawProp(context, rawProps, "strokeColors", sourceProps.strokeColors, {})),
          strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {1})),
          lineDashPattern(convertRawProp(context, rawProps, "lineDashPattern", sourceProps.lineDashPattern, {})),
          geodesic(convertRawProp(context, rawProps, "geodesic", sourceProps.geodesic, {})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {0})),
          tappable(convertRawProp(context, rawProps, "tappable", sourceProps.tappable, {false})),
          lineJoin(convertRawProp(context, rawProps, "lineJoin", sourceProps.lineJoin, {"round"})),
          lineCap(convertRawProp(context, rawProps, "lineCap", sourceProps.lineCap, {"round"})) {}

    AIRMapPolygonProps::AIRMapPolygonProps(const PropsParserContext &context, const AIRMapPolygonProps &sourceProps,
                                           const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          coordinates(convertRawProp(context, rawProps, "coordinates", sourceProps.coordinates, {})),
          fillColor(convertRawProp(context, rawProps, "fillColor", sourceProps.fillColor, {SharedColor(0xFF000000)})),
          strokeColor(convertRawProp(context, rawProps, "strokeColor", sourceProps.strokeColor, {SharedColor(0xFF000000)})),
          strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {1})),
          geodesic(convertRawProp(context, rawProps, "geodesic", sourceProps.geodesic, {})),
          lineDashPattern(convertRawProp(context, rawProps, "lineDashPattern", sourceProps.lineDashPattern, {})),
          holes(convertRawProp(context, rawProps, "holes", sourceProps.holes, {})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {0})),
          tappable(convertRawProp(context, rawProps, "tappable", sourceProps.tappable, {false})),
          lineJoin(convertRawProp(context, rawProps, "lineJoin", sourceProps.lineJoin, {"round"})),
          lineCap(convertRawProp(context, rawProps, "lineCap", sourceProps.lineCap, {"round"})) {}

    AIRMapCircleProps::AIRMapCircleProps(const PropsParserContext &context, const AIRMapCircleProps &sourceProps,
                                         const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          center(convertRawProp(context, rawProps, "center", sourceProps.center, {})),
          radius(convertRawProp(context, rawProps, "radius", sourceProps.radius, {})),
          fillColor(convertRawProp(context, rawProps, "fillColor", sourceProps.fillColor, {SharedColor(0xFF000000)})),
          strokeColor(convertRawProp(context, rawProps, "strokeColor", sourceProps.strokeColor, {SharedColor(0xFF000000)})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {})),
          strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {1})),
          lineDashPattern(convertRawProp(context, rawProps, "lineDashPattern", sourceProps.lineDashPattern, {})) {}

    AIRMapCalloutProps::AIRMapCalloutProps(const PropsParserContext &context, const AIRMapCalloutProps &sourceProps,
                                           const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          tooltip(convertRawProp(context, rawProps, "tooltip", sourceProps.tooltip, {false})),
          alphaHitTest(convertRawProp(context, rawProps, "alphaHitTest", sourceProps.alphaHitTest, {false})) {}

    AIRMapCalloutSubviewProps::AIRMapCalloutSubviewProps(const PropsParserContext &context, const AIRMapCalloutSubviewProps &sourceProps,
                                           const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps) {}

    GeojsonProps::GeojsonProps(const PropsParserContext &context, const GeojsonProps &sourceProps,
                               const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          geojson(convertRawProp(context, rawProps, "geojson", sourceProps.geojson, {})),
          strokeColor(convertRawProp(context, rawProps, "strokeColor", sourceProps.strokeColor, {})),
          fillColor(convertRawProp(context, rawProps, "fillColor", sourceProps.fillColor, {})),
          strokeWidth(convertRawProp(context, rawProps, "strokeWidth", sourceProps.strokeWidth, {})),
          color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
          lineDashPhase(convertRawProp(context, rawProps, "lineDashPhase", sourceProps.lineDashPhase, {})),
          lineDashPattern(convertRawProp(context, rawProps, "lineDashPattern", sourceProps.lineDashPattern, {})),
          lineCap(convertRawProp(context, rawProps, "lineCap", sourceProps.lineCap, {})),
          lineJoin(convertRawProp(context, rawProps, "lineJoin", sourceProps.lineJoin, {})),
          miterLimit(convertRawProp(context, rawProps, "miterLimit", sourceProps.miterLimit, {})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {})),
          markerComponent(convertRawProp(context, rawProps, "markerComponent", sourceProps.markerComponent, {})),
          title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
          tracksViewChanges(convertRawProp(context, rawProps, "tracksViewChanges", sourceProps.tracksViewChanges, {false})) {}

    AIRMapUrlTileProps::AIRMapUrlTileProps(const PropsParserContext &context, const AIRMapUrlTileProps &sourceProps,
                                     const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          urlTemplate(convertRawProp(context, rawProps, "urlTemplate", sourceProps.urlTemplate, {})),
          minimumZ(convertRawProp(context, rawProps, "minimumZ", sourceProps.minimumZ, {})),
          maximumZ(convertRawProp(context, rawProps, "maximumZ", sourceProps.maximumZ, {})),
          maximumNativeZ(convertRawProp(context, rawProps, "maximumNativeZ", sourceProps.maximumNativeZ, {})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {})),
          tileSize(convertRawProp(context, rawProps, "tileSize", sourceProps.tileSize, {})),
          doubleTileSize(convertRawProp(context, rawProps, "doubleTileSize", sourceProps.doubleTileSize, {})),
          shouldReplaceMapContent(
              convertRawProp(context, rawProps, "shouldReplaceMapContent", sourceProps.shouldReplaceMapContent, {})),
          flipY(convertRawProp(context, rawProps, "flipY", sourceProps.flipY, {})),
          tileCachePath(convertRawProp(context, rawProps, "tileCachePath", sourceProps.tileCachePath, {})),
          tileCacheMaxAge(convertRawProp(context, rawProps, "tileCacheMaxAge", sourceProps.tileCacheMaxAge, {})),
          offlineMode(convertRawProp(context, rawProps, "offlineMode", sourceProps.offlineMode, {})),
          opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {})) {}

    AIRMapWMSTileProps::AIRMapWMSTileProps(const PropsParserContext &context, const AIRMapWMSTileProps &sourceProps,
                                     const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          urlTemplate(convertRawProp(context, rawProps, "urlTemplate", sourceProps.urlTemplate, {})),
          minimumZ(convertRawProp(context, rawProps, "minimumZ", sourceProps.minimumZ, {})),
          maximumZ(convertRawProp(context, rawProps, "maximumZ", sourceProps.maximumZ, {})),
          maximumNativeZ(convertRawProp(context, rawProps, "maximumNativeZ", sourceProps.maximumNativeZ, {})),
          zIndex(convertRawProp(context, rawProps, "zIndex", sourceProps.zIndex, {})),
          tileSize(convertRawProp(context, rawProps, "tileSize", sourceProps.tileSize, {})),
          doubleTileSize(convertRawProp(context, rawProps, "doubleTileSize", sourceProps.doubleTileSize, {})),
          shouldReplaceMapContent(
              convertRawProp(context, rawProps, "shouldReplaceMapContent", sourceProps.shouldReplaceMapContent, {})),
          flipY(convertRawProp(context, rawProps, "flipY", sourceProps.flipY, {})),
          tileCachePath(convertRawProp(context, rawProps, "tileCachePath", sourceProps.tileCachePath, {})),
          tileCacheMaxAge(convertRawProp(context, rawProps, "tileCacheMaxAge", sourceProps.tileCacheMaxAge, {})),
          offlineMode(convertRawProp(context, rawProps, "offlineMode", sourceProps.offlineMode, {})),
          opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {})) {}

    AIRMapOverlayProps::AIRMapOverlayProps(const PropsParserContext &context, const AIRMapOverlayProps &sourceProps,
                                           const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          image(convertRawProp(context, rawProps, "image", sourceProps.image, {})),
          bounds(convertRawProp(context, rawProps, "bounds", sourceProps.bounds, {})),
          bearing(convertRawProp(context, rawProps, "bearing", sourceProps.bearing, {0})),
          tappable(convertRawProp(context, rawProps, "tappable", sourceProps.tappable, {false})),
          opacity(convertRawProp(context, rawProps, "opacity", sourceProps.opacity, {1.0})) {}

    AIRMapClusterProps::AIRMapClusterProps(const PropsParserContext &context, const AIRMapClusterProps &sourceProps,
                                           const RawProps &rawProps)
        : ViewProps(context, sourceProps, rawProps),
          distance(convertRawProp(context, rawProps, "distance", sourceProps.distance, {})),
          clusterItems(convertRawProp(context, rawProps, "clusterItems", sourceProps.clusterItems, {})) {}

} // namespace react
} // namespace facebook
